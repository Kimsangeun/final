<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="adminMapper">
	<select id="screenList" resultType="timeVo" parameterType="timeVo">
		 <!-- select * from screeninfo -->
		 select screeninfo.* ,movie.title from screeninfo,movie
		<include refid="whereDate"/>
		
		order by screeninfo.mID,screeninfo.scNum,screeninfo.mstart
	</select>
	
	<sql id="whereDate">
		<where>	
			<choose>
				<when test="mstart!=null">
					TO_CHAR(mstart, 'yyyy-MM-dd') = #{showdate} and screeninfo.mID = movie.mID
				</when>
				<otherwise>
					trunc(mstart) = trunc(sysdate+2) and screeninfo.mID = movie.mID
				</otherwise>	
			</choose>
		</where>
	</sql>
	
	<select id="movieAll" resultType="movieVo" >
		select * from movie order by release desc
	</select>
	
	<sql id="whereInfo">
		<where>	
			<choose>
				<when test="showtime!=null and showtime!=''">
					TO_CHAR(mstart, 'yyyy-MM-dd HH:mi') = #{showtime} 
					and mID = #{mID}
				</when>
			</choose>
		</where>
	</sql>
	
	<!-- 지정한 날 상영가능한 영화 불러오기 -->
	<select id="selectDayMovieList" parameterType="timeVo" resultType="movieVo" >
		select * from movie <include refid="whereSelectDay"/>
	</select>
	
	<sql id="whereSelectDay">
		<where>	
			<choose>
				<when test="showdate!=null and showdate!=''">
					<![CDATA[release <= TO_DATE(#{showdate},'yyyy-MM-dd')]]> and deadline=0
				</when>
				<otherwise>
					<![CDATA[release <= sysdate]]> and deadline=0
				</otherwise>
			</choose>

		</where>
	</sql>
	
	
	<select id="getScreen" resultType="screenVo" >
		select * from cinema
	</select>
	
	<select id="insertCinema" parameterType="timeVo"  >
		insert into screeninfo(
		sID,scNum,mstart,mID) 
		values(	SCREEN_SID.NEXTVAL,	#{scNum}, 
		TO_TIMESTAMP(#{showtime},'yyyy-MM-dd hh24:mi'),#{mID})
	</select>

	
	<!-- 시간중복체크 -->

	<sql id="runtime">
		(select runtime from movie where mid=screeninfo.mID)
	</sql>
	
	<sql id="mytime">
		(select runtime from movie where mid=#{mID})
	</sql>

	<sql id="ggg">
		<where>	
			TO_TIMESTAMP(#{showtime},'yyyy-MM-dd hh24:mi')
			BETWEEN CAST(mstart as DATE ) 
			AND CAST(mstart+(<include refid="runtime"/>+20)/(24*60) as DATE ) 
			and SCNUM = #{scNum}
		</where>
	</sql>
	
	<!-- 1. 같은시간, 모든영화관, 같은영화 //상영관 상관없이 같은시간에 시작하는지 그럼 같은시간 같은관 다른영화도 찾아보고 막아야한다.(->screenChk)-->
	<select id="timeChk" resultType="timeVo" parameterType="timeVo">
		 select * from screeninfo where 
		 TO_CHAR(mstart, 'yyyy-MM-dd hh24:mi') = #{showtime} and mID = #{mID}
	</select>
	
	<!-- 2. 같은시간, 같은상영관, 다른영화 //다음은 상영 시작, 끝시간 사이에 같은관 시간표 삽입 막기(->시간 중복/timeOverlap) -->
	<select id="screenChk" resultType="timeVo" parameterType="timeVo">
		 select * from screeninfo where 
		 TO_CHAR(mstart, 'yyyy-MM-dd hh24:mi') = #{showtime} and scNum = #{scNum}
	</select>

	<!-- 3. 기존영화 시작시간 ~ 시작시간+영화런타임+30분 사이의 타임에 영화 삽입 막기 //
	 	다음은 넣으려는 영화의 시작~끝+30 사이에 기존 영화 시작시간이 걸치면 막기(->timeOverlapEnd)-->
	<select id="timeOverlap" resultType="timeVo" parameterType="timeVo" >
		select * from screeninfo
		<include refid="ggg"/>
	</select>
	 	
	<!-- 4. 넣으려는 영화 시작 ~ 같은관, 기존영화 시작시간  ~ 넣으려는 영화 끝 경우  // 아마도 마지막-->
	<select id="timeOverlapEnd" resultType="timeVo" parameterType="timeVo" >
		select * from screeninfo where mstart
			BETWEEN CAST(TO_TIMESTAMP(#{showtime},'yyyy-MM-dd hh24:mi') as DATE ) 
			AND CAST(TO_TIMESTAMP(#{showtime},'yyyy-MM-dd hh24:mi')
			+(<include refid="mytime"/>+20)/(24*60) as DATE ) 
			and SCNUM = #{scNum}
		
	</select>

	<!--                                         -->
	
	<!--  -->
	<!--  -->
	<!--  -->
	<!-- 영화 관련 -->
	
	<insert id="movieInsert" parameterType="movieVo">
      <!--   <selectKey keyProperty="movieid" resultType="java.lang.Integer" order="BEFORE">
            <include refid="maxId"/>
        </selectKey> -->
    
        insert into movie (mid,title,director, actor ,plot ,genre ,
        grade ,nation ,poster,steelcut, release, runtime,rating,deadline) 
        values (MOVIE_MID.NEXTVAL, #{title}, #{director},#{actor}, #{plot}, #{genre}, #{grade},
        #{nation}, #{poster},#{steelcut},#{release},#{runtime},0,0) 
    </insert>
    
    <update id="movieModify" parameterType="movieVo">
    
    	update movie set title=#{title}, director = #{director}, actor = #{actor},
    	plot = #{plot}, genre = #{genre}, grade = #{grade}, nation = #{nation},
    	poster = #{poster}, steelcut = #{steelcut}, release = #{release},
    	runtime = #{runtime} where mid = #{mid} 
    
    </update>
    
    <update  id="movieDeadline" parameterType="movieVo">
    	update movie set deadline=1 where mid=#{mid}
    </update>
    
    <select id="movieDeadlineChk" parameterType="map" resultType="java.lang.Integer">
    	select count(*) from screeninfo where mstart>sysdate and mid=#{mid}
    </select>
    
    <select id="movieDetail" resultType="movieVo" parameterType="movieVo">
    
    	SELECT A.*, Round(nvl(B.bb/C.cc*100,0),2) as bookingRate
		FROM (SELECT * FROM MOVIE where mid = #{mid}) A,
		      (select mid,count(*) as bb from 
		      	(select reser.* from reser,screeninfo 
		      		where reser.sid = screeninfo.sid 
		      			and( screeninfo.mstart BETWEEN TRUNC(SYSDATE-7, 'w')+1 and TRUNC(SYSDATE, 'w')+1)) 
		      			group by mid having count(*) >= 0) B,
		      (select count(*)as cc from 
		      (select * from reser,screeninfo 
		      where reser.sid = screeninfo.sid 
		      and( screeninfo.mstart BETWEEN TRUNC(SYSDATE-7, 'w')+1 and TRUNC(SYSDATE, 'w')+1))) C
		WHERE A.mid = b.mid(+) order by bookingRate desc
        <!-- select * from movie where mid = #{mid} -->
    </select>
    
    <select id="movieDelete" parameterType="movieVo">
        delete from movie where mid = #{mid}
    </select>
	<!--  -->
	
	<!-- 정산 -->
	<!-- 년도별 매출  -->
	<select id="movieSettleYear" parameterType="map" resultType="map">
		select sum(cost) as sum,to_char(mstart,'yyyy') as day from 
		(select reser.cost,screeninfo.mstart,screeninfo.mid
		 from reser,screeninfo where reser.sid = screeninfo.sid)
		 <if test="mid != 0">
			where mid = #{mid}		
		</if>
		 group by to_char(mstart,'yyyy')order by day
	</select>
	<!-- 월별 매출  -->
	<select id="movieSettleMonth" parameterType="map" resultType="map">
		select sum(cost) as sum,to_char(mstart,'yyyy-MM') as day from 
		(select reser.cost,screeninfo.mstart,screeninfo.mid
		 from reser,screeninfo where reser.sid = screeninfo.sid)
		 where to_char(mstart,'yyyy')=#{select} 
		 <if test="mid != 0">
			and mid = #{mid}		
		</if>
		group by to_char(mstart,'yyyy-MM')order by day
	</select>
	<!-- 일별 매출  -->
	<select id="movieSettleDay" parameterType="map" resultType="map">
		select sum(cost) as sum,to_char(mstart,'yyyy-MM-dd') as day from 
		(select reser.cost,screeninfo.mstart,screeninfo.mid
		 from reser,screeninfo where reser.sid = screeninfo.sid)
		 where to_char(mstart,'yyyy-MM')=#{select}  
		 <if test="mid != 0">
			and mid = #{mid}		
		</if>
		group by to_char(mstart,'yyyy-MM-dd') order by day
	</select>
	<!-- 날짜조회  -->
	<select id="dateSettle" parameterType="settleVo" resultType="settleVo">
		select reser.*,screeninfo.mstart,movie.title from reser,screeninfo,MOVIE 
		where reser.sid = screeninfo.sid and screeninfo.mid = movie.mid
		and screeninfo.mstart between (to_date(#{from},'MM/dd/yy'))
		 and (to_date(#{to},'MM/dd/yy')+1)
		 <if test="mid != 0">
			and movie.mid = #{mid}		
		</if>
		  order by screeninfo.mstart
	</select>
	
	
	<!--  -->
	
	<!-- 빡스오피수 & 영화정보--><!-- 날짜 추가헤ㅐ줘야ㅐ -->
	<select id="boxoffice" resultType="movieVo">
		
		SELECT A.*, Round(nvl(B.bb/C.cc*100,0),2) as bookingRate
		FROM (SELECT * FROM MOVIE where deadline=0) A,
		      (select mid,count(*) as bb from 
		      	(select reser.* from reser,screeninfo 
		      		where reser.sid = screeninfo.sid 
		      			and( screeninfo.mstart
		      			 BETWEEN TRUNC(SYSDATE-7, 'w')+1 and TRUNC(SYSDATE, 'w')+1)) 
		      			group by mid having count(*) >= 0) B,
		      (select count(*)as cc from 
		      (select * from reser,screeninfo 
		      where reser.sid = screeninfo.sid 
		      and( screeninfo.mstart
		       BETWEEN TRUNC(SYSDATE-7, 'w')+1 and TRUNC(SYSDATE, 'w')+1))) C
		WHERE A.mid = b.mid(+) order by bookingRate desc

	</select>
	<select id="nowShowing" resultType="movieVo">
		select * from movie where 
		<![CDATA[release <= sysdate]]> and deadline=0
	</select>
	<select id="comingSoon" resultType="movieVo">
	
		SELECT A.*, Round(nvl(B.bb/C.cc*100,0),2) as bookingRate
		FROM (SELECT * FROM MOVIE where deadline=0 and <![CDATA[release > sysdate]]>) A,
		      (select mid,count(*) as bb from 
		      	(select reser.* from reser,screeninfo 
		      		where reser.sid = screeninfo.sid 
		      			and( screeninfo.mstart BETWEEN TRUNC(SYSDATE-7, 'w')+1 and TRUNC(SYSDATE, 'w')+1)) 
		      			group by mid having count(*) >= 0) B,
		      (select count(*)as cc from 
		      (select * from reser,screeninfo 
		      where reser.sid = screeninfo.sid 
		      and( screeninfo.mstart BETWEEN TRUNC(SYSDATE-7, 'w')+1 and TRUNC(SYSDATE, 'w')+1))) C
		WHERE A.mid = b.mid(+) order by A.release
		
	</select>
	
	<!--  -->
	
	<!-- 리뷰 -->
		<!-- 영화에 이미등록한 리뷰있는지 체크 -->
	<select id="reviewChk" parameterType="map" resultType="java.lang.Integer">
		SELECT count(*) from review where mid = #{mid} and id = #{id}
	</select>
	
		<!-- 리뷰가져오기 -->
	<select id="review" parameterType="movieVo" resultType="reviewVo">
		SELECT * from review where mid = #{mid} order by reg_date desc 
	</select>
	
		<!-- 레쟈에서 mid와 id 이용해서 실관람객인지 -->
	<select id="realShow" parameterType="movieVo" resultType="reviewVo">
		select id from reser where mid =#{mid} group by id
	</select>
	
		<!-- 리뷰등록 -->
	<update id="reviewInsert" parameterType="reviewVo">
		merge into review 
		using DUAL 
		on (id=#{id} and mid=#{mid})
		when matched then 
		update set review=#{review}, reg_date=sysdate, score=#{score}
		when not matched then 
		insert (id,mid,reg_date,review,score) values (#{id},#{mid},sysdate,#{review},#{score} )
		<!-- insert into review (mid,id,reg_date,score,review) 
        values (#{mid},#{id},sysdate,#{score},#{review})  -->
	</update>
	
		<!-- 삭제전 리뷰가 있는지 확인 -->
	<select id="deleteChk" parameterType="reviewVo" resultType="reviewVo">
		SELECT * from review where mid = #{mid} and id=#{id}
	</select>
	
		<!-- 리뷰삭제 -->
	<delete id="reviewDelete" parameterType="reviewVo">
		delete from review where id=#{id} and mid=#{mid}
	</delete>
	
		<!-- 점수업데이트 -->
	<update id="scoreUpdate" parameterType="reviewVo">
	update movie set rating = (select to_char((sc)/(cc),'FM99.00') 
	as rating from 
	(select sum(score) as sc, count(*)as cc from review where mid = #{mid}))
	 where mid= #{mid}
	</update>

	
	<!-- 이벤트(공지사항)게시판 메인화면에 걸을 게시물 가져오기  -->
	<select id="event" resultType="boardVo">
		select * from (select * from board order by regdate desc ) 
		where kind ='notice' and pw = 1 and <![CDATA[rownum<=4]]>
	</select>
	<!--  -->
	
	<!-- 페이징... 카운트 -->
	<select id="totalCount" resultType="java.lang.Integer" parameterType="java.lang.String">
		select count(*) from ${value}
	</select>
	
		<!-- 영화 -->
	<select id="movieList" resultType="movieVo" parameterType="boardVo" >
	select * from
		(select rownum rnum, tt.* from(select * from movie order by release desc) tt)
		 <![CDATA[ where rnum >=#{start} and rnum <= #{end} ]]>
	</select>
	
	
		<!-- 회원 -->	
	<select id="memList" resultType="memVo" parameterType="boardVo">
		select * from
		(select rownum rnum, tt.* from(
		 select * from member)tt )<![CDATA[ where rnum >=#{start} and rnum <= #{end} ]]>
	</select>	
	<!--  -->
	
		<!-- 예매 리스트 -->	
	<select id="resvList" resultType="reserVo" parameterType="boardVo">
		 select * from
		(select rownum rnum, tt.* from(
		  select reser.*,movie.title,screeninfo.scNum,screeninfo.mstart 
		  from reser,movie,screeninfo 
		  where reser.sid = screeninfo.sid and screeninfo.mid = movie.mid) tt)
		  <![CDATA[ where rnum >=#{start} and rnum <= #{end} ]]>
	</select>	
		<!--  -->
	<!--  -->
	
	<!-- 프로모션 리스트 -->	
	<select id="promoList" resultType="boardVo" >
		select * from board where kind='promo'
	</select>	
	
	<insert id="promoUpdate" parameterType="boardVo">
	<!-- 
		merge into board 
		using DUAL 
		
		on (bid=#{bid})
		
		when matched then  -->
		update board set upfile = #{upfile} , cnt=#{cnt}   where bid=#{bid} 
		<!-- 
		when not matched then 
		insert into board
		(bid, gid, seq, lev, cnt , regdate, pid, title,
		content, upfile, kind, pw)
		values ((select max(bid)+1 from board), (select max(bid)+1 from board), 0, 0, #{mid} , sysdate,
		#{pid}, #{title}, 0, #{upfile}, 'promo', 0)
		 -->
	</insert>	
	<!--  -->
</mapper>